pragma cashscript ^0.8.0;


contract RedemptionContract(
    bytes32 authKeyId,  // 32 B authkey nft id
    bytes32 tokenCategory,  // 32 B token category of nft used for minting
    pubkey  oraclePublicKey,  // 33 B, verifies message from oracle
) {
    function deposit(bytes priceMessage, datasig priceMessageSig, bool isInjectLiquidity) {
        require(checkDataSig(priceMessageSig, priceMessage, oraclePublicKey));
        int price = int(priceMessage.split(12)[1]);

        require(tx.inputs[0].tokenCategory == tokenCategory);

        // 1000 for tx fee and another 1000 for DUST in deposit output
        int depositSats = tx.inputs[1].value - 1000 - 1000;
        int tokenAmount = depositSats * price;

        if (!isInjectLiquidity) {
            depositSats = depositSats / 2;
            require(tx.outputs[2].value == depositSats);
        }

        require(tx.outputs[1].tokenCategory == tokenCategory);
        require(tx.outputs[1].tokenAmount == tokenAmount);

        require(tx.outputs[0].tokenCategory == tokenCategory);
        require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount - tokenAmount);
        require(tx.outputs[0].value == tx.inputs[0].value + depositSats);
    }

    function redeem(bytes priceMessage, datasig priceMessageSig) {
        require(checkDataSig(priceMessageSig, priceMessage, oraclePublicKey));
        int price = int(priceMessage.split(12)[1]);

        require(tx.inputs[0].tokenCategory == tokenCategory);
        require(tx.inputs[1].tokenCategory == tokenCategory);

        int redeemSats = int(tx.inputs[1].tokenAmount / price);

        require(tx.outputs[0].tokenCategory == tokenCategory);
        require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount + tx.inputs[1].tokenAmount);
        require(tx.outputs[0].value == tx.inputs[0].value - redeemSats);
        require(tx.outputs[1].value == redeemSats);
        // DUST sats in redeem input is used as tx fee
    }

    // https://github.com/mr-zwets/AuthGuard/blob/c5115b0df05c868018cc433e1047f5c5f6c8f7f7/AuthGuard.cash
    function unlockWithNft(bool keepGuarded) {
        // Check that the second input holds the AuthKey NFT
        require(tx.inputs[1].tokenCategory == authKeyId);
        require(tx.inputs[1].tokenAmount == 0);

        // if keepGuarded is false, the AuthHead can be released from the AuthGuard covenant
        if(keepGuarded) {
            // Self preservation of AuthGuard covenant as the first output
            require(tx.outputs[0].lockingBytecode == tx.inputs[this.activeInputIndex].lockingBytecode);
        }
    }
}
