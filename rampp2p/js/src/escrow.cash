pragma cashscript ^0.8.0;

contract Escrow(bytes20 arbiter, bytes20 buyer, bytes20 seller, bytes20 servicer, int tradingFee, int arbitrationFee, bytes32 paramHash) {

    function release(pubkey pk, sig s, bytes32 hash) {
        require(hash == paramHash);
        require(hash160(pk) == arbiter || hash160(pk) == seller);
        require(checkSig(s, pk));

        require(tx.inputs.length == 1);
        require(tx.outputs.length == 3);

        int minerFee = 1000;
        int fees = minerFee + tradingFee + arbitrationFee;
        int amount = tx.inputs[this.activeInputIndex].value - fees;        
        
        bool correctAmount = tx.outputs[0].value == amount;
        bool correctTradingFee = tx.outputs[1].value == tradingFee;
        bool correctArbitrationFee = tx.outputs[2].value == arbitrationFee;
        
        require(correctAmount && correctTradingFee && correctArbitrationFee);

        bytes25 buyerLock = new LockingBytecodeP2PKH(buyer);
        bytes25 servicerLock = new LockingBytecodeP2PKH(servicer);
        bytes25 arbiterLock = new LockingBytecodeP2PKH(arbiter);
        
        bool sendsToBuyer = tx.outputs[0].lockingBytecode == buyerLock;
        bool sendsToServicer = tx.outputs[1].lockingBytecode == servicerLock;
        bool sendsToArbiter = tx.outputs[2].lockingBytecode == arbiterLock;
        
        require(sendsToBuyer && sendsToServicer && sendsToArbiter);
    }

    function refund(pubkey pk, sig s, bytes32 hash) {
        require(hash == paramHash);
        require(hash160(pk) == arbiter);
        require(checkSig(s, pk));

        require(tx.inputs.length == 1);
        require(tx.outputs.length == 3);

        int minerFee = 1000;
        int fees = minerFee + tradingFee + arbitrationFee;
        int amount = tx.inputs[this.activeInputIndex].value - fees;        
        
        bool correctAmount = tx.outputs[0].value == amount;
        bool correctTradingFee = tx.outputs[1].value == tradingFee;
        bool correctArbitrationFee = tx.outputs[2].value == arbitrationFee;

        require(correctAmount && correctTradingFee && correctArbitrationFee);

        bytes25 sellerLock = new LockingBytecodeP2PKH(seller);
        bytes25 servicerLock = new LockingBytecodeP2PKH(servicer);
        bytes25 arbiterLock = new LockingBytecodeP2PKH(arbiter);
        
        bool sendsToSeller = tx.outputs[0].lockingBytecode == sellerLock;
        bool sendsToServicer = tx.outputs[1].lockingBytecode == servicerLock;
        bool sendsToArbiter = tx.outputs[2].lockingBytecode == arbiterLock;
        
        require(sendsToSeller && sendsToServicer && sendsToArbiter);
    }
}