# Generated by Django 3.0.14 on 2024-11-12 00:53

from django.db import migrations
from collections import defaultdict
import logging
logger = logging.getLogger(__name__)

def get_ads_by_peer(queryset, fiat_currency, trade_type):
    # Filter ads by the given FiatCurrency 

    queryset = queryset.filter(trade_type=trade_type, fiat_currency__id=fiat_currency.id).order_by('-created_at')
    logger.info(f'Found {queryset.count()} {trade_type} ads for {fiat_currency.symbol}')
    # Group ads by Peer
    ads_by_peer = defaultdict(list) 
    for ad in queryset: 
        ads_by_peer[ad.owner.name].append(ad)
    return ads_by_peer

def mark_excess_ads_private(apps, schema_editor):
    # for each currency
    Ad = apps.get_model('rampp2p', 'Ad')

    queryset = Ad.objects.filter(deleted_at__isnull=True)
    
    FiatCurrency = apps.get_model('rampp2p', 'FiatCurrency')
    fiat_currency = FiatCurrency.objects.all()
    trade_types = ['BUY', 'SELL']
    for trade_type in trade_types:
        logger.info(f'Processing {trade_type} ads')
        for currency in fiat_currency:
            # get all ads in this currency by peer
            ads_by_peer = get_ads_by_peer(queryset, currency, trade_type)
            for peer, ads in ads_by_peer.items():
                # If peer has more than 1 ads for this currency, mark all but the latest ad 
                if len(ads) > 1:
                    logger.info(f'-----[{currency.symbol}] Processing {len(ads)} for {peer}')
                    for index, ad in enumerate(ads):
                        if index > 0:
                            ad.is_public = False
                            ad.save()


class Migration(migrations.Migration):

    dependencies = [
        ('rampp2p', '0194_merge_20241017_0634'),
    ]

    operations = [
        migrations.RunPython(mark_excess_ads_private)
    ]
