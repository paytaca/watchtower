# Generated by Django 3.0.14 on 2024-04-30 06:53

from django.db import migrations
from django.db.models import Count, OuterRef, Subquery
from rampp2p.models import StatusType, TradeType
from django.utils import timezone

import logging
logger = logging.getLogger(__name__)

def init_order_members(apps, schema_editor):
    Order = apps.get_model('rampp2p', 'Order')
    Status = apps.get_model('rampp2p', 'Status')
    OrderMember = apps.get_model('rampp2p', 'OrderMember')

    last_status = Status.objects.filter(
        order=OuterRef('pk'),
        status__in=[StatusType.CANCELED, StatusType.REFUNDED, StatusType.RELEASED]
    ).order_by('-created_at').values('order')[:1]

    orders = Order.objects.exclude(pk__in=Subquery(last_status)).annotate(member_count=Count('members')).filter(member_count=0)
    for order in orders:
        logger.warn(f'Updating order #{order.id}')
        ad_snapshot = order.ad_snapshot
        # create order members
        seller, buyer = None, None
        if ad_snapshot.trade_type == TradeType.SELL:
            seller = ad_snapshot.ad.owner
            buyer = order.owner
        else:
            seller = order.owner
            buyer = ad_snapshot.ad.owner
        
        seller_member = OrderMember.objects.create(order=order, peer=seller, type='SELLER')
        buyer_member = OrderMember.objects.create(order=order, peer=buyer, type='BUYER')

        if seller_member.peer.wallet_hash == order.owner.wallet_hash:
            seller_member.read_at = timezone.now()
            seller_member.save()
        if buyer_member.peer.wallet_hash == order.owner.wallet_hash:
            buyer_member.read_at = timezone.now()
            buyer_member.save()

        # add arbiter as order member
        if order.arbiter:
            member, _ = OrderMember.objects.get_or_create(order=order, type='ARBITER')
            member.arbiter = order.arbiter
            member.save()

class Migration(migrations.Migration):

    dependencies = [
        ('rampp2p', '0145_auto_20240429_0532'),
    ]

    operations = [
        migrations.RunPython(init_order_members)
    ]
