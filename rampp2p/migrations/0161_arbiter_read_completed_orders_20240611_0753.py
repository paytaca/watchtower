# Generated by Django 3.0.14 on 2024-06-11 07:53

from django.db import migrations
from django.db.models import Count, OuterRef, Subquery
from rampp2p.models import StatusType
from django.utils import timezone

import logging
logger = logging.getLogger(__name__)

'''
Marks completed orders as already read by the arbiter
'''
def arbiter_read_completed_orders(apps, schema_editor):
    Order = apps.get_model('rampp2p', 'Order')
    Status = apps.get_model('rampp2p', 'Status')
    OrderMember = apps.get_model('rampp2p', 'OrderMember')

    last_status = Status.objects.filter(
        order=OuterRef('pk'),
        status__in=[StatusType.CANCELED, StatusType.REFUNDED, StatusType.RELEASED]
    ).order_by('-created_at').values('order')[:1]

    orders = Order.objects.filter(pk__in=Subquery(last_status)).annotate(member_count=Count('members')).filter(member_count__gt=0)
    for order in orders:
        arbiter_member = OrderMember.objects.filter(order__id=order.id, type='ARBITER')
        if arbiter_member.exists():
            arbiter_member = arbiter_member.first()
            arbiter_member.read_at = timezone.now()
            arbiter_member.save()
            logger.warn(f'Updated order #{order.id} | arbiter: {arbiter_member.arbiter.name}')



class Migration(migrations.Migration):

    dependencies = [
        ('rampp2p', '0160_auto_20240611_0550'),
    ]

    operations = [
        migrations.RunPython(arbiter_read_completed_orders)
    ]
