pragma cashscript ^0.8.0;


contract MerchantVault (
    pubkey merchantPubkey,  // 0th address of merchant wallet (for refund)
    bytes32 verificationTokenCategory
) {

    function claim (bytes32 voucherCategory) {
        // 3 inputs: lock nft, key nft, verification token
        // 2 outputs: recipient of BCH stored in lock NFT, verification token
        require(tx.inputs.length >= 3);
        require(tx.outputs.length >= 2);

        // key NFT must be an immutable NFT & lock/key should be the same category
        require(tx.inputs[0].tokenCategory == voucherCategory);
        require(tx.inputs[1].tokenCategory == voucherCategory);

        // third input should be the immutable verification token
        require(tx.inputs[2].tokenCategory == verificationTokenCategory);

        // lock & key nft must have the same commitment
        // 20 bytes - claim expiration timestamp
        // 20 bytes - claim amount
        require(tx.inputs[0].nftCommitment == tx.inputs[1].nftCommitment);

        // sent amount must be equal to the commitment data
        bytes claimAmountBytes = tx.inputs[1].nftCommitment.split(20)[1];
        int claimAmount = int(claimAmountBytes);
        require(tx.outputs[0].value == claimAmount);

        // the amount sent must be from lock nft's input
        require(tx.inputs[0].value == claimAmount);

        // converted NFT to BCH funds must be sent to the embedded device vault in the verification token commitment
        bytes32 deviceVaultScriptHash = bytes32(tx.inputs[2].nftCommitment);
        bytes35 deviceVault = new LockingBytecodeP2SH32(deviceVaultScriptHash);
        require(tx.outputs[0].lockingBytecode == deviceVault);
        
        // second output must be the verification token
        require(tx.outputs[1].lockingBytecode == deviceVault);
        require(tx.outputs[1].tokenCategory == verificationTokenCategory);
    }

    function refund () {
        // 1 input: lock nft
        // 1 output: satoshis refund reward from burned lock nft
        require(tx.inputs.length >= 1);
        require(tx.outputs.length >= 1);

        // sent amount must be equal to the commitment data
        bytes claimExpiryTimestampBytes, bytes claimAmountBytes = tx.inputs[0].nftCommitment.split(20);
        int refundedAmount = int(claimAmountBytes) - 1000;
        int claimExpiryTimestamp = int(claimExpiryTimestampBytes);
        require(tx.outputs[0].value == refundedAmount);

        // lock nft must be expired
        require(tx.time >= claimExpiryTimestamp);

        // claim recipient must be quest owner embedded inside nft commitment
        bytes20 merchantPKH = hash160(merchantPubkey);
        bytes25 merchant = new LockingBytecodeP2PKH(merchantPKH);
        require(tx.outputs[0].lockingBytecode == merchant);
    }

    // for accidental sending of BCH to this contract
    function emergencyRefund (pubkey senderPk) {
        // ensure utxo is from sender and gets sent back to that wallets
        bytes25 sender = new LockingBytecodeP2PKH(hash160(senderPk));
        require(tx.inputs[0].lockingBytecode == sender);
        require(tx.outputs[0].lockingBytecode == sender);
    }

}